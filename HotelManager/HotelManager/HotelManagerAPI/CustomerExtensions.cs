// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace HotelManager
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Models;

    /// <summary>
    /// Extension methods for Customer.
    /// </summary>
    public static partial class CustomerExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<TblCustomer> VGettbl(this ICustomer operations)
            {
                return Task.Factory.StartNew(s => ((ICustomer)s).VGettblAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<TblCustomer>> VGettblAsync(this ICustomer operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.VGettblWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='tblCustomer'>
            /// </param>
            public static TblCustomer Posttbl(this ICustomer operations, TblCustomer tblCustomer)
            {
                return Task.Factory.StartNew(s => ((ICustomer)s).PosttblAsync(tblCustomer), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='tblCustomer'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TblCustomer> PosttblAsync(this ICustomer operations, TblCustomer tblCustomer, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PosttblWithHttpMessagesAsync(tblCustomer, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static TblCustomer Gettbl(this ICustomer operations, string id)
            {
                return Task.Factory.StartNew(s => ((ICustomer)s).GettblAsync(id), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TblCustomer> GettblAsync(this ICustomer operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GettblWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='tblCustomer'>
            /// </param>
            public static void Puttbl(this ICustomer operations, string id, TblCustomer tblCustomer)
            {
                Task.Factory.StartNew(s => ((ICustomer)s).PuttblAsync(id, tblCustomer), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='tblCustomer'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PuttblAsync(this ICustomer operations, string id, TblCustomer tblCustomer, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.PuttblWithHttpMessagesAsync(id, tblCustomer, null, cancellationToken).ConfigureAwait(false);
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static TblCustomer Deletetbl(this ICustomer operations, string id)
            {
                return Task.Factory.StartNew(s => ((ICustomer)s).DeletetblAsync(id), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TblCustomer> DeletetblAsync(this ICustomer operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeletetblWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
